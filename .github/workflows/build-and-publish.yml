name: Build And Publish

on:
  release:
    types: [created]

  push:
    branches:
      - master

  workflow_dispatch:

jobs:
  publish-package:
    if: "contains(github.event.head_commit.message, 'Version')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install the project
        run: uv sync --all-extras --dev

  build-executables:
    needs: publish-package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install the project
        run:
          uv sync --all-extras --dev
      - name: Build executables
        run: |
          uv run pyinstaller -F -i NONE pyncm/__main__.py --name pyncm
      - name: Build archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path dist\pyncm.exe -DestinationPath pyncm-${{ matrix.os }}-${{ runner.arch }}.zip
      - name: Build archive (Unix)
        if: matrix.os != 'windows-latest'
        run: zip -j pyncm-${{ matrix.os }}-${{ runner.arch }}.zip dist/pyncm
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pyncm-${{ matrix.os }}-${{ runner.arch }}.zip
          path: pyncm-${{ matrix.os }}-${{ runner.arch }}.zip

  publish-release:
    needs: build-executables
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: pyncm*
          merge-multiple: true
      - name: Get Version
        id: get_version
        run: |
          version=$(git log -1 --oneline --format=%s | cut -d' ' -f2)
          echo "::set-output name=version::$version"
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Version ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          files: |
            dist/*